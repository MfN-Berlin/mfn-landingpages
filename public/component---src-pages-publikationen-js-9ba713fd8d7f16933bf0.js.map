{"version":3,"file":"component---src-pages-publikationen-js-9ba713fd8d7f16933bf0.js","mappings":"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","sources":["webpack://gatsby-starter-default/./node_modules/fuse.js/dist/fuse.mjs","webpack://gatsby-starter-default/./src/pages/publikationen.js"],"sourcesContent":["/**\n * Fuse.js v7.0.0 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2023 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n  let getFn = null;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n    getFn = key.getFn;\n  }\n\n  return { path, id, weight, src, getFn }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false,\n  // The weight to determine how much field length norm effects scoring.\n  fieldNormWeight: 1\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(weight = 1, mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      // Default function is 1/sqrt(x), weight makes that variable\n      const norm = 1 / Math.pow(numTokens, 0.5 * weight);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({\n    getFn = Config.getFn,\n    fieldNormWeight = Config.fieldNormWeight\n  } = {}) {\n    this.norm = norm(fieldNormWeight, 3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      let value = key.getFn ? key.getFn(doc) : this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          } else ;\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (isString(value) && !isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(\n  keys,\n  docs,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(\n  data,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore$1(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore$1(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore$1(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore$1(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore$1(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn,\n        fieldNormWeight: this.options.fieldNormWeight\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      const res = [];\n      for (let i = 0, len = node.children.length; i < len; i += 1) {\n        const child = node.children[i];\n        const result = evaluate(child, item, idx);\n        if (result.length) {\n          res.push(...result);\n        } else if (node.operator === LogicalOperator.AND) {\n          return []\n        }\n      }\n      return res\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '7.0.0';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport { Fuse as default };\n","import React, { useState, useMemo, useEffect, Component } from 'react'\nimport { graphql } from \"gatsby\"\nimport Fuse from 'fuse.js'\n\nimport Header from \"../components/layouts/Header\"\nimport Footer from '../components/layouts/Footer'\nimport Section from '../components/elements/Section'\n\n// Error Boundary Component\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true }\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log('Error caught by boundary:', error, errorInfo)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n\n    return this.props.children\n  }\n}\n\n// Formatting functions\nconst formatAuthors = (mfnAuthors, unknownAuthors) => {\n  const allAuthors = [\n    ...(unknownAuthors ? unknownAuthors.split('; ') : []),\n    ...(mfnAuthors ? [mfnAuthors] : [])\n  ].filter(Boolean)\n  \n  if (allAuthors.length === 0) return 'Unknown Author'\n  if (allAuthors.length > 7) {\n    return `${allAuthors.slice(0, 6).join(', ')}, ... ${allAuthors[allAuthors.length - 1]}`\n  }\n  return allAuthors.join(', ')\n}\n\nconst formatAPA = (pub) => {\n  try {\n    const authors = formatAuthors(pub.mfn_authors || '', pub.unknown_authors || '')\n    const year = pub.year || 'n.d.'\n    const title = pub.title \n      ? `<span class=\"font-bold\">${pub.title}</span>` \n      : '<span class=\"font-bold\">Untitled</span>'\n    const journal = pub.journal || 'Unknown Journal'\n    const volume = pub.volume ? `*${pub.volume}*` : ''\n    const issue = pub.issue ? `(${pub.issue})` : ''\n    const pageInfo = pub.page_info \n      ? (typeof pub.page_info === 'string' && pub.page_info.startsWith('Article') \n        ? pub.page_info \n        : `p. ${pub.page_info}`)\n      : ''\n    const doi = pub.upload_id && typeof pub.upload_id === 'string' && pub.upload_id.startsWith('10.') \n      ? `<a href=\"https://doi.org/${pub.upload_id}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-Green-500 hover:text-Green-600\">https://doi.org/${pub.upload_id}</a>` \n      : ''\n\n    return `${authors}. (${year}). ${title}. *${journal}*, ${volume}${issue}, ${pageInfo}. ${doi}`.trim().replace(/\\s+/g, ' ')\n  } catch (error) {\n    console.error('Error formatting publication:', pub, error)\n    return 'Error formatting publication'\n  }\n}\n\nconst ITEMS_PER_PAGE = 10\n\n// Add these helper components at the top of your file\nconst VisuallyHidden = ({ children }) => (\n  <span className=\"absolute overflow-hidden h-[1px] w-[1px] m-[-1px] p-0 border-0 clip-rect-1\">\n    {children}\n  </span>\n);\n\nconst PublicationsPage = ({ data }) => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [publications, setPublications] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState(null)\n  const [currentPage, setCurrentPage] = useState(1)\n\n  useEffect(() => {\n    if (data && data.allFile && data.allFile.edges.length > 0) {\n      const fileContent = data.allFile.edges[0].node.internal.content\n      try {\n        const parsedContent = JSON.parse(fileContent)\n        setPublications(parsedContent.publications_2020_merged || [])\n        setIsLoading(false)\n      } catch (error) {\n        console.error('Error parsing JSON:', error)\n        setError('Error loading publications')\n        setIsLoading(false)\n      }\n    }\n  }, [data])\n\n  const fuse = useMemo(() => new Fuse(publications, {\n    keys: ['title', 'mfn_authors', 'unknown_authors', 'journal', 'year', 'keyword'],\n    threshold: 0.3,\n  }), [publications])\n\n  const filteredPublications = useMemo(() => {\n    return searchTerm ? fuse.search(searchTerm).map(result => result.item) : publications\n  }, [searchTerm, fuse, publications])\n\n  const pageCount = Math.ceil(filteredPublications.length / ITEMS_PER_PAGE)\n  const paginatedPublications = filteredPublications.slice(\n    (currentPage - 1) * ITEMS_PER_PAGE,\n    currentPage * ITEMS_PER_PAGE\n  )\n\n  // Modify the search handler to reset pagination\n  const handleSearch = (e) => {\n    setSearchTerm(e.target.value)\n    setCurrentPage(1) // Reset to first page whenever search term changes\n  }\n\n  if (isLoading) return <div>Loading publications...</div>\n  if (error) return <div>{error}</div>\n\n  return (\n    <>\n      <Header />\n      <main className=\"bg-white flex flex-col items-center justify-center p-0\">\n        <Section backgroundColor=\"bg-Black-100\">\n          <ErrorBoundary>\n            <h1 className=\"typography-h1\">Alle Publikationen seit 2019</h1>\n            <input\n              type=\"text\"\n              value={searchTerm}\n              onChange={handleSearch} // Use the new handler instead of direct setState\n              placeholder=\"Search publications...\"\n            />\n            <table>\n              <thead>\n                <tr>\n                  <th>Publication (APA Style)</th>\n                </tr>\n              </thead>\n              <tbody>\n                {paginatedPublications.map((pub, index) => (\n                  <tr key={index}>\n                    <td dangerouslySetInnerHTML={{ __html: formatAPA(pub) }} className=\"pb-12\"/>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <div>\n              <ul className=\"p-0 m-0 text-[#666]\">\n                {/* First Page */}\n                <li className=\"inline\">\n                  <button \n                    onClick={() => setCurrentPage(1)}\n                    disabled={currentPage === 1}\n                    className={`px-[0.3em] text-[#666] hover:text-[#91bd0d] transition-colors duration-300 ${\n                      currentPage === 1 ? 'text-[#7da30b]' : ''\n                    }`}\n                  >\n                    <VisuallyHidden>Erste Seite</VisuallyHidden>\n                    «\n                  </button>\n                </li>\n\n                {/* Previous Page */}\n                <li className=\"inline\">\n                  <button \n                    onClick={() => setCurrentPage(currentPage - 1)}\n                    disabled={currentPage === 1}\n                    className=\"px-[0.3em] text-[#666] hover:text-[#91bd0d] transition-colors duration-300\"\n                  >\n                    <VisuallyHidden>Vorherige Seite</VisuallyHidden>\n                    ‹\n                  </button>\n                </li>\n\n                {/* Page Numbers */}\n                {(() => {\n                  let pages = [];\n                  const totalPages = pageCount;\n                  const current = currentPage;\n                  \n                  // Always show first page\n                  pages.push(1);\n                  \n                  // Calculate range around current page\n                  let start = Math.max(2, current - 2);\n                  let end = Math.min(totalPages - 1, current + 2);\n                  \n                  // Add ellipsis after first page if needed\n                  if (start > 2) {\n                    pages.push('...');\n                  }\n                  \n                  // Add pages around current page\n                  for (let i = start; i <= end; i++) {\n                    pages.push(i);\n                  }\n                  \n                  // Add ellipsis before last page if needed\n                  if (end < totalPages - 1) {\n                    pages.push('...');\n                  }\n                  \n                  // Add last page if there is more than one page\n                  if (totalPages > 1) {\n                    pages.push(totalPages);\n                  }\n                  \n                  return pages.map((page, index) => {\n                    if (page === '...') {\n                      return (\n                        <li key={`ellipsis-${index}`} className=\"inline px-[0.3em] text-[#666]\" role=\"presentation\">\n                          …\n                        </li>\n                      );\n                    }\n                    \n                    return (\n                      <li key={page} className=\"inline\">\n                        <button\n                          onClick={() => setCurrentPage(page)}\n                          className={`px-[0.3em] hover:text-[#91bd0d] transition-colors duration-300 ${\n                            currentPage === page ? 'text-[#7da30b]' : 'text-[#666]'\n                          }`}\n                        >\n                          <VisuallyHidden>\n                            {currentPage === page ? 'Aktuelle Seite' : `Seite ${page}`}\n                          </VisuallyHidden>\n                          {page}\n                        </button>\n                      </li>\n                    );\n                  });\n                })()}\n\n                {/* Next Page */}\n                <li className=\"inline\">\n                  <button \n                    onClick={() => setCurrentPage(currentPage + 1)}\n                    disabled={currentPage === pageCount}\n                    className=\"px-[0.3em] text-[#666] hover:text-[#91bd0d] transition-colors duration-300\"\n                  >\n                    <VisuallyHidden>Nächste Seite</VisuallyHidden>\n                    <span aria-hidden=\"true\">›</span>\n                  </button>\n                </li>\n\n                {/* Last Page */}\n                <li className=\"inline\">\n                  <button \n                    onClick={() => setCurrentPage(pageCount)}\n                    disabled={currentPage === pageCount}\n                    className=\"px-[0.3em] text-[#666] hover:text-[#91bd0d] transition-colors duration-300\"\n                  >\n                    <VisuallyHidden>Letzte Seite</VisuallyHidden>\n                    <span aria-hidden=\"true\">»</span>\n                  </button>\n                </li>\n              </ul>\n            </div>\n          </ErrorBoundary>\n        </Section>\n      </main>\n      <Footer />\n    </>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allFile(filter: {sourceInstanceName: {eq: \"publications\"}, extension: {eq: \"json\"}}) {\n      edges {\n        node {\n          name\n          internal {\n            content\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default PublicationsPage\n"],"names":["isArray","value","Array","getTag","isString","isNumber","isBoolean","isObject","isObjectLike","isDefined","isBlank","trim","length","undefined","Object","prototype","toString","call","hasOwn","hasOwnProperty","KeyStore","constructor","keys","this","_keys","_keyMap","totalWeight","forEach","key","obj","createKey","push","id","weight","get","keyId","toJSON","JSON","stringify","path","src","getFn","createKeyPath","createKeyId","Error","name","MISSING_KEY_PROPERTY","INVALID_KEY_WEIGHT_VALUE","split","join","Config","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","includeMatches","findAllMatches","minMatchCharLength","location","threshold","distance","useExtendedSearch","list","arr","deepGet","index","result","baseToString","i","len","ignoreLocation","ignoreFieldNorm","fieldNormWeight","SPACE","FuseIndex","norm","mantissa","cache","Map","m","Math","pow","numTokens","match","has","n","parseFloat","round","set","clear","isCreated","setIndexRecords","setSources","docs","records","setKeys","_keysMap","create","doc","docIndex","_addString","_addObject","add","size","removeAt","splice","getValueForItemAtKeyId","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","map","computeScore$1","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","MAX_BITS","search","text","patternAlphabet","patternLen","textLen","max","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","start","finish","bitArr","j","charMatch","charAt","isMatch","indices","matchmask","end","convertMaskToIndices","createPatternAlphabet","char","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","searchIn","allIndices","totalScore","hasMatches","BaseMatch","isMultiMatch","getMatch","multiRegex","isSingleMatch","singleRegex","exp","matches","FuzzyMatch","super","_bitapSearch","type","IncludeMatch","searchers","startsWith","endsWith","searchersLen","SPACE_RE","MultiMatchSet","Set","ExtendedSearch","query","filter","results","queryItem","found","searcher","token","parseQuery","condition","_","numMatches","qLen","pLen","registeredSearchers","createSearcher","searcherClass","LogicalOperator","KeyType","isExpression","convertToExplicit","parse","auto","next","isQueryPath","isPath","isLeaf","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","node","children","operator","transformMatches","data","refIndex","transformScore","Fuse","_keyStore","setCollection","_docs","_myIndex","remove","predicate","getIndex","limit","_searchStringList","_searchObjectList","_searchLogical","Number","EPSILON","computeScore","sort","slice","transformers","transformer","format","expression","evaluate","_findMatches","res","child","resultMap","expResults","version","parseIndex","config","args","register","ErrorBoundary","_Component","props","_this","state","hasError","_inheritsLoose","getDerivedStateFromError","error","_proto","componentDidCatch","errorInfo","console","log","render","React","Component","formatAPA","pub","authors","formatAuthors","mfnAuthors","unknownAuthors","allAuthors","concat","_toConsumableArray","Boolean","mfn_authors","unknown_authors","year","title","journal","volume","issue","pageInfo","page_info","upload_id","replace","VisuallyHidden","_ref","className","_ref2","searchTerm","setSearchTerm","useState","publications","setPublications","isLoading","setIsLoading","setError","currentPage","setCurrentPage","useEffect","allFile","edges","fileContent","internal","content","parsedContent","publications_2020_merged","fuse","useMemo","filteredPublications","pageCount","ceil","paginatedPublications","Header","Section","backgroundColor","onChange","e","target","placeholder","dangerouslySetInnerHTML","__html","onClick","disabled","pages","totalPages","current","page","role","Footer"],"sourceRoot":""}